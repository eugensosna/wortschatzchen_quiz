import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema22 extends i0.VersionedSchema {
  Schema22({required super.database}) : super(version: 22);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    languages,
    kindsOfWords,
    words,
    synonyms,
    translatedWords,
    leipzigDataFromIntranet,
    means,
    sessions,
    examples,
    quizGroup,
    question,
    typeSession,
  ];
  late final Shape0 languages = Shape0(
      source: i0.VersionedTable(
        entityName: 'languages',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 kindsOfWords = Shape1(
      source: i0.VersionedTable(
        entityName: 'kinds_of_words',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 words = Shape2(
      source: i0.VersionedTable(
        entityName: 'words',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_1,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 synonyms = Shape3(
      source: i0.VersionedTable(
        entityName: 'synonyms',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_13,
          _column_14,
          _column_1,
          _column_8,
          _column_15,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 translatedWords = Shape4(
      source: i0.VersionedTable(
        entityName: 'translated_words',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_8,
          _column_16,
          _column_1,
          _column_15,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 leipzigDataFromIntranet = Shape5(
      source: i0.VersionedTable(
        entityName: 'leipzig_data_from_intranet',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_13,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 means = Shape6(
      source: i0.VersionedTable(
        entityName: 'means',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_13,
          _column_1,
          _column_24,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 sessions = Shape7(
      source: i0.VersionedTable(
        entityName: 'sessions',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_13,
          _column_25,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 examples = Shape8(
      source: i0.VersionedTable(
        entityName: 'examples',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_13,
          _column_1,
          _column_26,
          _column_27,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 quizGroup = Shape1(
      source: i0.VersionedTable(
        entityName: 'quiz_group',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 question = Shape9(
      source: i0.VersionedTable(
        entityName: 'question',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_3,
          _column_1,
          _column_28,
          _column_29,
          _column_30,
          _column_31,
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index typeSession = i1.Index(
      'type_session', 'CREATE INDEX type_session ON sessions (typesession)');
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get shortName =>
      columnsByName['short_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('short_name', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 2, maxTextLength: 15),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('uuid', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
}

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get important =>
      columnsByName['important']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get mean =>
      columnsByName['mean']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get baseForm =>
      columnsByName['base_form']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseLang =>
      columnsByName['base_lang']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get rootWordID =>
      columnsByName['root_word_i_d']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get version =>
      columnsByName['version']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get kindOfWord =>
      columnsByName['kind_of_word']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get kindOfWordRef =>
      columnsByName['kind_of_word_ref']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('important', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('description', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('mean', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('base_form', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>('base_lang', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES languages (id)'));
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('root_word_i_d', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('version', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('kind_of_word', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_12(String aliasedName) =>
    i1.GeneratedColumn<int>('kind_of_word_ref', aliasedName, true,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES kinds_of_words (id)'));

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseWord =>
      columnsByName['base_word']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get synonymWord =>
      columnsByName['synonym_word']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseLang =>
      columnsByName['base_lang']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get translatedName =>
      columnsByName['translated_name']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('base_word', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES words (id)'));
i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('synonym_word', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES words (id)'));
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('translated_name', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseLang =>
      columnsByName['base_lang']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get targetLang =>
      columnsByName['target_lang']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get translatedName =>
      columnsByName['translated_name']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>('target_lang', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES languages (id)'));

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseWord =>
      columnsByName['base_word']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get url =>
      columnsByName['url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get html =>
      columnsByName['html']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get htmlOpen =>
      columnsByName['html_open']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get htmlExamples =>
      columnsByName['html_examples']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get article =>
      columnsByName['article']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get KindOfWort =>
      columnsByName['kind_of_wort']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get wordOfBase =>
      columnsByName['word_of_base']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('url', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('html', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('html_open', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('html_examples', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>('article', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>('kind_of_wort', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('word_of_base', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseWord =>
      columnsByName['base_word']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get meansOrder =>
      columnsByName['means_order']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_24(String aliasedName) =>
    i1.GeneratedColumn<int>('means_order', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseWord =>
      columnsByName['base_word']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get typesession =>
      columnsByName['typesession']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>('typesession', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get baseWord =>
      columnsByName['base_word']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get goaltext =>
      columnsByName['goaltext']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get exampleOrder =>
      columnsByName['example_order']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_26(String aliasedName) =>
    i1.GeneratedColumn<String>('goaltext', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_27(String aliasedName) =>
    i1.GeneratedColumn<int>('example_order', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get answer =>
      columnsByName['answer']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get example =>
      columnsByName['example']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get refWord =>
      columnsByName['ref_word']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get refQuizGroup =>
      columnsByName['ref_quiz_group']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get archive =>
      columnsByName['archive']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_28(String aliasedName) =>
    i1.GeneratedColumn<String>('answer', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_29(String aliasedName) =>
    i1.GeneratedColumn<String>('example', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_30(String aliasedName) =>
    i1.GeneratedColumn<int>('ref_word', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES words (id)'));
i1.GeneratedColumn<int> _column_31(String aliasedName) =>
    i1.GeneratedColumn<int>('ref_quiz_group', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES quiz_group (id)'));
i1.GeneratedColumn<bool> _column_32(String aliasedName) =>
    i1.GeneratedColumn<bool>('archive', aliasedName, true,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("archive" IN (0, 1))'));
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema22 schema) from21To22,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 21:
        final schema = Schema22(database: database);
        final migrator = i1.Migrator(database, schema);
        await from21To22(migrator, schema);
        return 22;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema22 schema) from21To22,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from21To22: from21To22,
    ));
